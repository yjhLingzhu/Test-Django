"""
Django settings for Test_Django project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-g-k@ka56z5m#swb4y-j-=l!dl_f9k4a(%!!zn8#%&u$82bsx_!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = [
    "http://localhost:8899",
    "http://127.0.0.1:8080"
]

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

ROOT_URLCONF = 'Test_Django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Test_Django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test_django',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1'
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

BASE_LOG_DIR = os.path.join(BASE_DIR, "logs")
LOGGING = {
    "version": 1,  # 保留字
    "disable_existing_loggers": False,  # 禁用已经存在的logger实例
    "formatters": {
        "standard": {
            "format": "[%(asctime)s][%(levelname)s]""[%(filename)s:%(lineno)d][%(message)s]"
        },
        "simple": {
            "format": "[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s"
        },

    },
    # 过滤器
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        # 注册该过滤器
        # "request_info": {
        #     "()": "utils.middleware.RequestLogFilter",
        # }
    },
    "handlers": {
        "default": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",  # 保存到文件，根据时间自动切
            "filename": os.path.join(BASE_LOG_DIR, "chacewang_info.log"),
            # "backupCount": 3,  # 备份数为3  xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
            "when": "D",  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
            "formatter": "standard",
            "encoding": "utf-8",
        },
        "warn": {
            "level": "WARNING",
            "class": "logging.handlers.TimedRotatingFileHandler",  # 保存到文件，根据时间自动切
            "filename": os.path.join(BASE_LOG_DIR, "chacewang_warning.log"),
            # "backupCount": 3,  # 备份数为3  xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
            "when": "D",  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
            "formatter": "standard",
            "encoding": "utf-8",
        },
        # 专门用来记错误日志
        "error": {
            "level": "ERROR",
            "class": "logging.handlers.TimedRotatingFileHandler",  # 保存到文件，根据时间自动切
            "filename": os.path.join(BASE_LOG_DIR, "chacewang_err.log"),  # 日志文件
            # "backupCount": 3,  # 备份数为3  xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
            "when": "D",  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
            "formatter": "standard",
            "encoding": "utf-8",
        },
        # 按文件大小分割
        # "DEMO": {
        #     "level": "INFO",
        #     "class": "logging.handlers.RotatingFileHandler",  # 保存到文件，根据文件大小自动切
        #     "filename": os.path.join(BASE_LOG_DIR, "chacewang_info.log"),  # 日志文件
        #     "maxBytes": 1024 * 1024 * 50,  # 日志大小 50M
        #     #"backupCount": 3,  # 备份数为3  xx.log --> xx.log.1 --> xx.log.2 --> xx.log.3
        #     "formatter": "standard",
        #     "encoding": "utf-8",
        # },
    },
    "loggers": {
        "info": {
            "handlers": ["default"],
            "level": "INFO",
            "propagate": True,  # 向不向更高级别的logger传递
        },
        "warn": {
            "handlers": ["warn"],
            "level": "WARNING",
            "propagate": True,
        },
        "error": {
            "handlers": ["error"],
            "level": "ERROR",
            "propagate": True,
        }
    }
}
